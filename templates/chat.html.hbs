<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{ title }}</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
            display: flex;
            flex-direction: column;
            height: 100vh;
            background-color: #f5f5f5;
        }
        .chat-container {
            display: flex;
            flex-direction: column;
            height: 100%;
            max-width: 1200px;
            margin: 0 auto;
            width: 100%;
            background-color: white;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        }
        .chat-header {
            padding: 1rem;
            background-color: #4CAF50;
            color: white;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        .chat-header h1 {
            margin: 0;
            font-size: 1.5rem;
        }
        .chat-header a {
            color: white;
            text-decoration: none;
        }
        .chat-messages {
            flex: 1;
            overflow-y: auto;
            padding: 1rem;
        }
        .message {
            margin-bottom: 1rem;
            padding: 0.8rem;
            border-radius: 4px;
            max-width: 80%;
        }
        .message.user {
            background-color: #e6f7ff;
            align-self: flex-end;
            margin-left: auto;
        }
        .message.system {
            background-color: #f0f0f0;
            color: #666;
            font-style: italic;
            text-align: center;
            max-width: 100%;
        }
        .message .sender {
            font-weight: bold;
            margin-bottom: 0.3rem;
        }
        .message .time {
            font-size: 0.8rem;
            color: #999;
            margin-top: 0.3rem;
        }
        .chat-input {
            display: flex;
            padding: 1rem;
            border-top: 1px solid #eee;
        }
        .chat-input input {
            flex: 1;
            padding: 0.8rem;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 1rem;
            margin-right: 0.5rem;
        }
        .chat-input button {
            padding: 0.8rem 1.5rem;
            background-color: #4CAF50;
            color: white;
            border: none;
            border-radius: 4px;
            font-size: 1rem;
            cursor: pointer;
        }
        .chat-input button:hover {
            background-color: #45a049;
        }
        @media (max-width: 768px) {
            .chat-header h1 {
                font-size: 1.2rem;
            }
            .message {
                max-width: 90%;
            }
        }
    </style>
</head>
<body>
    <div class="chat-container">
        <div class="chat-header">
            <h1>{{ title }}</h1>
            <a href="/logout">Logout</a>
        </div>
        <div class="chat-messages" id="messages"></div>
        <div class="chat-input">
            <input type="text" id="message-input" placeholder="Type a message..." autocomplete="off">
            <button id="send-button">Send</button>
        </div>
    </div>

    <script>
        const nickname = "{{ nickname }}";
        const roomId = "{{ room_id }}";
        const wsUrl = "{{ ws_url }}";

        let ws;

        function connect() {
            ws = new WebSocket(wsUrl);

            ws.onopen = function() {
                console.log("Connected to WebSocket");
            };

            ws.onmessage = function(event) {
                const data = JSON.parse(event.data);

                if (data.type === "command") {
                    handleCommand(data);
                } else {
                    addMessage(data);
                }
            };

            ws.onclose = function() {
                console.log("Disconnected from WebSocket");
                // Try to reconnect after a delay
                setTimeout(connect, 3000);
            };

            ws.onerror = function(error) {
                console.error("WebSocket error:", error);
            };
        }

        function handleCommand(data) {
            switch (data.command) {
                case "clear":
                    document.getElementById("messages").innerHTML = "";
                    break;
                case "logout":
                    window.location.href = "/logout";
                    break;
            }
        }

        function addMessage(data) {
            const messagesDiv = document.getElementById("messages");
            const messageDiv = document.createElement("div");

            messageDiv.className = `message ${data.type}`;

            if (data.type === "message") {
                const senderDiv = document.createElement("div");
                senderDiv.className = "sender";
                senderDiv.textContent = data.sender;
                messageDiv.appendChild(senderDiv);

                const contentDiv = document.createElement("div");
                contentDiv.className = "content";
                contentDiv.textContent = data.content;
                messageDiv.appendChild(contentDiv);

                const timeDiv = document.createElement("div");
                timeDiv.className = "time";
                timeDiv.textContent = new Date(data.timestamp).toLocaleTimeString();
                messageDiv.appendChild(timeDiv);
            } else if (data.type === "system") {
                messageDiv.textContent = data.content;
            }

            messagesDiv.appendChild(messageDiv);
            messagesDiv.scrollTop = messagesDiv.scrollHeight;
        }

        document.getElementById("send-button").addEventListener("click", sendMessage);
        document.getElementById("message-input").addEventListener("keypress", function(e) {
            if (e.key === "Enter") {
                sendMessage();
            }
        });

        function sendMessage() {
            const input = document.getElementById("message-input");
            const message = input.value.trim();

            if (message) {
                ws.send(JSON.stringify({
                    content: message
                }));

                input.value = "";
            }
        }

        // Connect to WebSocket when page loads
        connect();
    </script>
</body>
</html>